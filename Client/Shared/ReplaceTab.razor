@inject RegexService regexService
@inject CacheService cacheService
@inject ToastService toastService

<EditForm Model="@requestModel" OnSubmit="@OnSubmit">
    <InputPatternEditor @ref="@inputPatternEditor" RequestModel="@requestModel" CacheService="@cacheService"
        InputStringCache="@CacheService.REPLACE_INPUT_CACHE" PatternStringCache="@CacheService.REPLACE_PATTERN_CACHE" />

    <label for="replacement" class="form-label">Replacement String</label>
    <div class="input-group mb-3">
        <CacheList DataSource="@cacheService.GetCachedData(CacheService.REPLACE_REPLACEMENT_CACHE)"
            OnSelect="(input)=>requestModel.Replacement = input" />
        <textarea class="form-control" id="input" @bind="@requestModel.Replacement" required></textarea>
    </div>
    
    <MatchOptionEditor RequestModel="@requestModel"/>
    <div class="row justify-content-center mb-3">
        <div class="col-4 text-center">
            <SubmitButton Text="Replace" />
        </div>
    </div>
</EditForm>

<hr />

@if (replaceResult is not null)
{
    <textarea class="form-control" @bind="@replaceResult" disabled></textarea>
}

@code
{
    private ReplaceRequestModel requestModel = new();
    private string? replaceResult = null;
    private InputPatternEditor? inputPatternEditor = null;

    private void OnSubmit()
    {
        try
        {
            replaceResult = regexService.Replace(requestModel);
            inputPatternEditor!.StoreCurrentDateInCache();
            cacheService.StoreDataInCache(CacheService.REPLACE_REPLACEMENT_CACHE, requestModel.Replacement);
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, ex.Message));
            replaceResult = null;
        }
    }
}
