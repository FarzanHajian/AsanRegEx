@inject RegexService regexService
@inject CacheService cacheService
@inject ToastService toastService

<EditForm Model="@requestModel" OnSubmit="@OnSubmit">
    <InputPatternEditor RequestModel="@requestModel" CacheService="@cacheService" />

    <MatchOptionEditor RequestModel="@requestModel"/>
    <div class="row justify-content-center mb-3">
        <div class="col-4 text-center">
            <SubmitButton Text="Find Matches" />
        </div>
    </div>
</EditForm>

<hr />

@if (matchesFound is not null)
{
    if (matchesFound.Length == 1)
    {
        <MatchViewer @key="@matchesFound[0].GetHashCode()" Model="@matchesFound[0]" CssClass="item1" IsExpanded="true" />
    }
    else
    {
        for (int i = 0; i < matchesFound.Length; i++)
        {
            <MatchViewer @key="@matchesFound[i].GetHashCode()" Model="@matchesFound[i]" CssClass=@(i%2 == 0 ? "item1":"item2") />
        }
    }
}

@code
{
    private MatchRequestModel requestModel = new();
    private MatchResultModel[]? matchesFound = null;

    private void OnSubmit()
    {
        try
        {
            matchesFound = regexService.GetMatches(requestModel);
            if (!matchesFound.Any()) toastService.Notify(new(ToastType.Warning, "No match found"));
            cacheService.StoreInputInCache(requestModel.Input);
            cacheService.StorePatternInCache(requestModel.Pattern);

        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, ex.Message));
            matchesFound = null;
        }
    }
}
