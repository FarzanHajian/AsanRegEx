<div class="mb-3 border border-dark-subtle p-3" style="background-color:@BackgroundColor">
    <div>
        <h6 class="d-inline">Match:</h6>
        <span class="ms-3 text-primary" style="cursor: pointer; font-size:.75rem; user-select: none" @onclick=@(()=> isExpanded = !isExpanded)>
            @if(isExpanded)
            {
                <span>[ Less <Icon Name="IconName.CaretUp"></Icon> ]</span>
            } else
            {
                <span>[ More <Icon Name="IconName.CaretDown"></Icon> ]</span>
            }
        </span>
    </div>
    <Grid TItem="MatchModel" class="@TABLE_CLASSES" DataProvider="MatchDataProvider" Responsive="true">
        <GridColumn TItem="MatchModel" HeaderText="Value" PropertyName="Value">
            @context.Value
        </GridColumn>
        <GridColumn TItem="MatchModel" HeaderText="Index" PropertyName="Index">
            @context.Index
        </GridColumn>
        <GridColumn TItem="MatchModel" HeaderText="Length" PropertyName="Length">
            @context.Length
        </GridColumn>
    </Grid>

    @if (isExpanded)
    {
        <h6>Captures:</h6>
        <Grid TItem="CaptureModel" class="@TABLE_CLASSES" DataProvider="CaptureDataProvider" Responsive="true">
            <GridColumn TItem="CaptureModel" HeaderText="Value" PropertyName="Value">
                @context.Value
            </GridColumn>
            <GridColumn TItem="CaptureModel" HeaderText="Index" PropertyName="Index">
                @context.Index
            </GridColumn>
            <GridColumn TItem="CaptureModel" HeaderText="Length" PropertyName="Length">
                @context.Length
            </GridColumn>
        </Grid>

        <h6>Groups:</h6>
        <Grid TItem="GroupModel" class="@TABLE_CLASSES" DataProvider="GroupDataProvider" Responsive="true">
            <GridColumn TItem="GroupModel" HeaderText="Name" PropertyName="Name">
                @context.Name
            </GridColumn>
            <GridColumn TItem="GroupModel" HeaderText="Value" PropertyName="Value">
                @context.Value
            </GridColumn>
            <GridColumn TItem="GroupModel" HeaderText="Index" PropertyName="Index">
                @context.Index
            </GridColumn>
            <GridColumn TItem="GroupModel" HeaderText="Length" PropertyName="Length">
                @context.Length
            </GridColumn>
        </Grid>
    }
</div>

@code
{
    private const string TABLE_CLASSES = "table table-sm table-bordered table-light table-group-divider mb-3";
    private bool isExpanded = false;
    [Parameter] public MatchModel Model { get; set; } = null!;
    [Parameter] public string BackgroundColor { get; set; } = "";

    private Task<GridDataProviderResult<MatchModel>> MatchDataProvider(GridDataProviderRequest<MatchModel> request)
    {
        return Task.FromResult(request.ApplyTo(Enumerable.Repeat(Model, 1)));
    }

    private Task<GridDataProviderResult<CaptureModel>> CaptureDataProvider(GridDataProviderRequest<CaptureModel> request)
    {
        return Task.FromResult(request.ApplyTo(Model.Captues));
    }

    private Task<GridDataProviderResult<GroupModel>> GroupDataProvider(GridDataProviderRequest<GroupModel> request)
    {
        return Task.FromResult(request.ApplyTo(Model.Groups));
    }
}
